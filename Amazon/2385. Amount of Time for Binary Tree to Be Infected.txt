/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    void generate(TreeNode* &root, map<TreeNode*, TreeNode*> &mp, TreeNode* &source, int start){
        if(root==NULL) return;
        if(root->val==start){
            source = root;
        }
        if(root->left){
            mp[root->left]=root;
            generate(root->left, mp,source,start);
        }
        if(root->right){
            mp[root->right]=root;
            generate(root->right, mp,source, start);
        }

        return;
    }

    int amountOfTime(TreeNode* root, int start) {
        set<TreeNode*> st;
        map<TreeNode*, TreeNode*> mp;
        int ans = 0;
        queue<pair<pair<TreeNode*,TreeNode*>,int>> q;
        TreeNode* source = NULL;
        generate(root, mp,source, start);
        q.push({{source,mp[source]}, 0});
        while(!q.empty()){
            auto p = q.front();
            TreeNode* curr = p.first.first;
            TreeNode* parent = p.first.second;
            int t = p.second;
            ans = max(ans,t);
            q.pop();
            st.insert(curr);
            if(parent && st.find(parent)==st.end()){
                q.push({{parent,mp[parent]},t+1});
            }
            if(curr->left && st.find(curr->left)==st.end()){
                q.push({{curr->left,curr},t+1});
            }
            if(curr->right && st.find(curr->right)==st.end()){
                q.push({{curr->right,curr},t+1});
            }
        }
        return ans;

    } 
};