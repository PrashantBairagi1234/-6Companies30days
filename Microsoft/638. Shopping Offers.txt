class Solution {
public:
    unordered_map<string, int> memo; // Memoization table
    
    string serialize(vector<int>& needs) {
        string key = "";
        for (int need : needs) {
            key += to_string(need) + ",";
        }
        return key;
    }

    int solve(vector<int>& price, vector<vector<int>>& special, vector<int> needs, int index) {
        string key = to_string(index) + "-" + serialize(needs); // Unique key for the current state
        
        // Check if the result for this state is already computed
        if (memo.find(key) != memo.end()) {
            return memo[key];
        }

        // Base case: no more offers
        if (index == special.size()) {
            int res = 0;
            for (int i = 0; i < needs.size(); i++) {
                res += needs[i] * price[i]; // Calculate cost without special offers
            }
            return res;
        }

        // Reject the current offer
        int reject = solve(price, special, needs, index + 1);

        // Try to apply the current offer if possible
        bool valid = true;
        for (int i = 0; i < needs.size(); i++) {
            needs[i] -= special[index][i]; // Decrement the needs
            if (needs[i] < 0) {
                valid = false; // Offer is invalid if it exceeds needs
            }
        }

        int accept = INT_MAX;
        if (valid) {
            accept = special[index][needs.size()] + solve(price, special, needs, index); // Apply offer
        }

        // Store and return the minimum cost between accepting and rejecting the offer
        memo[key] = min(accept, reject);
        return memo[key];
    }
    
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        return solve(price, special, needs, 0);
    }
};


TC: O(s.(k+1)^m . m)


m: Number of different items to buy (e.g., apples, bananas).
k: Maximum quantity needed for any item.
s: Number of special offers.