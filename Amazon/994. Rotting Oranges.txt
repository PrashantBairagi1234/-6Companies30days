class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<pair<int,int>, int> >q;
        int r = grid.size();
        int c= grid[0].size();

        for(int i = 0;i<grid.size();i++){
            for(int j =0;j<grid[0].size();j++){
                if(grid[i][j]==2){
                    q.push({{i,j},0});
                }
            }
        }
        int res = 0;
        while(!q.empty()){
          auto p = q.front();
          int curr_x = p.first.first;
          int curr_y = p.first.second;
          int t = p.second;
          res = max(res,t);
          q.pop();


          int dirX[] = {-1,0,1,0};
          int dirY[] = {0,1,0,-1};


          for(int k = 0;k<4;k++){
            int newX = curr_x + dirX[k];
            int newY = curr_y + dirY[k];

            if(newX>=0 && newX<r && newY>=0 && newY<c && grid[newX][newY]==1){
                grid[newX][newY]=2;
                q.push({{newX, newY}, t+1});
            }
          }
        }
for(int i = 0;i<grid.size();i++){
            for(int j =0;j<grid[0].size();j++){
                if(grid[i][j]==1){
                    return -1;
                }
            }
        }

        return res;

    }
};