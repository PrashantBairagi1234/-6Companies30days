class Solution {
public:
    void dijkstra(int s, vector<vector<int>>& edges, vector<vector<int>>& dist, 
                  priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>& pq, 
                  map<int, vector<pair<int, int>>>& mp) {
        
        dist[s][s] = 0;
        pq.push({0, s});

        while (!pq.empty()) {
            int wt = pq.top().first;
            int adjNode = pq.top().second;
            pq.pop();

            for (auto it : mp[adjNode]) {
                int node = it.first;
                int dis = it.second;

                if (wt + dis < dist[s][node]) {
                    dist[s][node] = wt + dis;
                    pq.push({dist[s][node], node});
                }
            }
        }
    }

    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector<vector<int>> dist(n, vector<int>(n, distanceThreshold + 1));
        map<int, vector<pair<int, int>>> mp;
        
        // Building the graph
        for (auto& it : edges) {
            mp[it[0]].emplace_back(it[1], it[2]);
            mp[it[1]].emplace_back(it[0], it[2]); // Add reverse edge as well
        }

        // Run Dijkstra for each node
        for (int i = 0; i < n; i++) {
            priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
            dijkstra(i, edges, dist, pq, mp);
        }

        // Find the city with the least number of reachable cities within the distanceThreshold
        int city = -1, reachableCities = n;
        for (int i = 0; i < n; i++) {
            int count = 0;
            for (int j = 0; j < n; j++) {
                if (dist[i][j] <= distanceThreshold) {
                    count++;
                }
            }
            if (count <= reachableCities) {
                reachableCities = count;
                city = i;
            }
        }

        return city;
    }
};
